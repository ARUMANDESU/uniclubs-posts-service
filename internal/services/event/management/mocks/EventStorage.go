// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/arumandesu/uniclubs-posts-service/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// EventStorage is an autogenerated mock type for the EventStorage type
type EventStorage struct {
	mock.Mock
}

// CreateEvent provides a mock function with given fields: ctx, club, user
func (_m *EventStorage) CreateEvent(ctx context.Context, club domain.Club, user domain.User) (*domain.Event, error) {
	ret := _m.Called(ctx, club, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateEvent")
	}

	var r0 *domain.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Club, domain.User) (*domain.Event, error)); ok {
		return rf(ctx, club, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Club, domain.User) *domain.Event); ok {
		r0 = rf(ctx, club, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Club, domain.User) error); ok {
		r1 = rf(ctx, club, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEventById provides a mock function with given fields: ctx, eventId
func (_m *EventStorage) DeleteEventById(ctx context.Context, eventId string) error {
	ret := _m.Called(ctx, eventId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEventById")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, eventId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEvent provides a mock function with given fields: ctx, id
func (_m *EventStorage) GetEvent(ctx context.Context, id string) (*domain.Event, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetEvent")
	}

	var r0 *domain.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Event, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Event); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEvent provides a mock function with given fields: ctx, event
func (_m *EventStorage) UpdateEvent(ctx context.Context, event *domain.Event) (*domain.Event, error) {
	ret := _m.Called(ctx, event)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEvent")
	}

	var r0 *domain.Event
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Event) (*domain.Event, error)); ok {
		return rf(ctx, event)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Event) *domain.Event); ok {
		r0 = rf(ctx, event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Event) error); ok {
		r1 = rf(ctx, event)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEventStorage creates a new instance of EventStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventStorage {
	mock := &EventStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
